//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;
// UNASSIGNED is used for empty cells in sudoku grid 
#define UNASSIGNED 0  

// N is used for the size of Sudoku grid.  
// Size will be NxN  
#define N 9  


// } Driver Code Ends
class Solution 
{
    public:
    //Function to find a solved Sudoku. 
    bool issafe(int grid[N][N],int i,int j,int x)
    {
        
        for(int k=0;k<N;k++)
        {
          if(grid[k][j]==x || grid[i][k]==x)
          return false;
        }
    
        int rs=i-i%3;
        int cs=j-j%3;
        for(int row=0;row<3;row++)
        {
            for(int col=0;col<3;col++)
            {
                if(grid[row+rs][col+cs]==x)
                return false;
            }
        }
        return true;
    }
    
    bool SolveSudoku(int grid[N][N])  
    { 
    int row=-1,col=-1;
    bool isempty=false;
    
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            if(grid[i][j]==UNASSIGNED)
            {
                row=i;
                col=j;
                isempty=true;
                break;
            }
            
        }
        if(isempty)
            break;
    }
    
    if(!isempty)
    return true;
    
    for(int x=1;x<=9;x++)
    {
        if(issafe(grid,row,col,x))
        {
            grid[row][col]=x;
            if(SolveSudoku(grid))
            return true;
            grid[row][col]=UNASSIGNED;
            
        }
    }
    return false;
    }
    
    //Function to print grids of the Sudoku.
    void printGrid (int grid[N][N]) 
    {
        for(int i=0;i<N;i++)
            {
                for(int j=0;j<N;j++)
                {
                    cout<<grid[i][j]<<" ";
                }
                cout<<endl;
            }
    }
};

//{ Driver Code Starts.

int main() {
	int t;
	cin>>t;
	while(t--)
	{
		int grid[N][N];
		
		for(int i=0;i<9;i++)
		    for(int j=0;j<9;j++)
		        cin>>grid[i][j];
		        
		Solution ob;
		
		if (ob.SolveSudoku(grid) == true)  
            ob.printGrid(grid);  
        else
            cout << "No solution exists";  
        
        cout<<endl;
	
cout << "~" << "\n";
}
	
	return 0;
}
// } Driver Code Ends
